package package1;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Stack;

/*****************************************************
 * @author Gloire Rubambiza & Recod Rekodeo
 *@version 04/08/2015
 *Class that handles all list operations
 *Implements all methods of ISimpleDatabase interface
 *****************************************************/


public class SimpleDatabase implements ISimpleDatabase, Serializable{
	/** a Long variable that serializes the objects */
	private static final long serialVersionUID = 1L;

	/**LinkedList of nodes */
	private package1.LinkedList link;

	/**The initial node that creates all other nodes */
	private Node node;

	/** A stack to save methods in case they are to be undone */
	private static Stack <LinkedList> linksave = new Stack<LinkedList>();


	/****************************************************
	 * Constructor for SimpleDatabase
	 * Objects from the class are to be used for testing
	 * @param plink reference to an existing LinkedList
	 * @param pnode a node in the existing LinkedList
	 ****************************************************/
	public SimpleDatabase(package1.LinkedList plink, Node pnode){
		link = plink; // Can be given an already-existing LinkedList as parameter
		node = pnode;
	}

	/****************************************************
	 * Constructor for SimpleDatabase
	 * Objects from the class are to be used for testing
	 * Instantiates a new LinkedList of nodes
	 ****************************************************/
	public SimpleDatabase(){
		link = new package1.LinkedList(); //Creates a new LinkedList
		node = new Node();
	}
	/******************************************
	 * Method that resets the stack to null if
	 * Load or save methods are called
	 ******************************************/
	public void resetStack(){
		linksave.clear();
	}

	@Override
	/************************************************
	 * Method that inserts student info into a node
	 * Unless empty, add the record at the end
	 * @param student the student to be inserted
	 ***********************************************/
	public void insert(Student student){

		if( link.getCount() >= 1){
			doFunction();
		}
		Node n = new Node(student);
		link.add(n);
	}


	@Override
	/************************************************************
	 * Method that deletes a student record from the linked list
	 * Uses a gNumber to find the node to be deleted
	 * @param gNumber the number to compare against
	 ************************************************************/
	public boolean delete(String gNumber) {

		try{
			if (link.getCount() == 0){
				System.out.println("There's no data to delete!");
				return false;
			}
			else{
				doFunction();
			}
			if( gNumber.equals( link.getHead().getCurrentStudent().getGNumber()) ){
				Node temp = link.getHead().getNext();
				link.getHead().setNext(null);
				link.setHead(temp);

				return true; 
			}
			else{
				Node temp = link.getHead().getNext();
				link.setCurrentNode(link.getHead());

				do{
					if( gNumber.equals( temp.getCurrentStudent().getGNumber())) {

						Node temp2 = temp.getNext();
						link.getCurrentNode().setNext(temp2);
						temp.setNext(null);
						return true; 
					}
					temp = temp.getNext();
					link.Next();

				}while( temp.getNext() != null);		
			}

		} catch( NullPointerException e){

		}
		return false;
	}

	@Override
	/*******************************************************
	 * Method to find a unique student in the LinkedList
	 * Uses a gNumber to find the student
	 * @param gNumber the unique student identifying number
	 ******************************************************/
	public Student find(String gNumber) {
		Node temp = link.getHead();
		if(temp.getCurrentStudent().getGNumber().compareTo(gNumber)== 0){
			return temp.getCurrentStudent();
		}
		while(temp.getNext() != null){
			if(temp.getNext().getCurrentStudent().getGNumber().compareTo(gNumber)== 0){
				return temp.getNext().getCurrentStudent();
			}
			temp = temp.getNext();
		}
		return null;
	}

	/********************************************************
	 * Method used by removeDuplicates to compare students
	 * @param gNumber the gNumber of the student to be found
	 * @param l the LinkedList to search through
	 * @return true if the students being compared match
	 *******************************************************/
	public boolean findUnique(String gNumber, package1.LinkedList l) {
		Node temp = l.getHead();
		if(temp.getCurrentStudent().getGNumber().compareTo(gNumber)== 0){
			return true;
		}
		while(temp.getNext() != null){
			if(temp.getNext().getCurrentStudent().getGNumber().compareTo(gNumber)== 0){
				return true;
			}
			temp = temp.getNext();
		}
		return false;
	}

	@Override
	/*******************************************************
	 * Method to sort the students in the LinkedList by name
	 * Calls the compareTo method in the Student class
	 *******************************************************/
	public void Sort() {
		doFunction();
		if(link.getCount()== 0){
			System.out.println("There's no data to sort");
			return;
		}
		else{
			Node temp = link.getHead();
			link.setCurrentNode(temp);
			int c = link.getCount();

			for( int b = 0; b < link.getCount() ; b++){
				int i = 1;
				while(link.getCurrentNode().getNext() != null && i <= c ){
					link.Next();
					if(temp.getCurrentStudent().compareTo( link.getCurrentNode().getCurrentStudent())==1){
						temp = link.getCurrentNode();
					}
					i++;
				}
				Student cp_a = temp.getCurrentStudent();
				Student cp_b = link.getCurrentNode().getCurrentStudent();

				temp.setCurrentStudent(cp_b);
				link.getCurrentNode().setCurrentStudent(cp_a);

				c--; 
				link.setCurrentNode(link.getHead());
				temp = link.getHead();
			}
		}
	}

	@Override
	public boolean update(String gNumber, Student student) {

		return false;
	}

	/*******************************************************
	 * Method that displays the database objects in the GUI
	 * Loops through all objects and creates a string
	 * @return String a String of objects' information
	 ******************************************************/
	public String display(){
		String d = "";
		Node temp = link.getHead();
		link.setCurrentNode(temp);
		while(link.getCurrentNode() != null){
			String name = link.getCurrentNode().getCurrentStudent().getName();
			String gnumber = link.getCurrentNode().getCurrentStudent().getGNumber();
			String s = ""; 
			String gpa = s+ link.getCurrentNode().getCurrentStudent().getGpa();
			d += name + " " + gnumber + " " + gpa + " " + "\n";
			link.setCurrentNode(link.getCurrentNode().getNext());
		}
		return d;
	}

	@Override
	/***************************************************************
	 * Method to reserve the list of nodes
	 * Students objects are reversed opposite of alphabetical order 
	 ***************************************************************/
	public void reverseList() {

		doFunction();
		package1.LinkedList nlist = new package1.LinkedList();
		while(link.getHead() != null){
			nlist.add(link.getTail());
			Node temp = link.getHead();
			while(temp.getNext()!=null && temp.getNext().getNext() != null){
				temp = temp.getNext();
			}
			if(link.getHead() == link.getTail()){
				link.setHead(null);
			}
			link.setTail(temp);
			link.getTail().setNext(null);
		}
		link = nlist; //Point the old empty list to the new reversed one
	}

	@Override
	/******************************************************
	 * Method that removes all duplicates from the list
	 * Only one copy of the duplicates is left in the list
	 *****************************************************/
	public void removeDuplicates() {

		doFunction(); // Save the state of the LinkedList before performing an operation
		if(link.getCount() == 0){
			return;
		}
		Stack <Node> nodesaver = new Stack<Node>();
		Node temp = link.getHead();
		package1.LinkedList nlist = new package1.LinkedList();
		while(temp.getNext() != null){
			nodesaver.push(temp);
			if(temp.getNext().getNext() == null){
				nodesaver.push(temp.getNext());
				break;
			}
			temp = temp.getNext();
		}

		Node student = nodesaver.pop();
		nlist.add(student);
		while(nodesaver.isEmpty() == false){
			Node teststudent = nodesaver.pop();
			if(findUnique(teststudent.getCurrentStudent().getGNumber(), nlist) == false){
				nlist.add(new Node( teststudent.getCurrentStudent()));
			}
		}
		link = nlist;
	}
	/**********************************************
	 * Method that pushes a copy of a link to
	 * The stack before performing the next method
	 **********************************************/
	public void doFunction(){
		linksave.push(copyLink());
	}

	/*************************************************
	 * Method that copies the initial state of a link
	 * Prior to changing the link with the method
	 * @return the copy of the LinkedList to be pushed
	 * To the stack
	 *************************************************/
	public LinkedList copyLink(){

		LinkedList copy = new LinkedList();

		try{
			link.setCurrentNode(link.getHead());

			if( link.getCount() >=1){
				while( link.getCurrentNode().getNext() != null && link.getCurrentNode().getCurrentStudent()!= null){

					copy.add(new Node( link.getCurrentNode().getCurrentStudent())); //Loop through all objects and make copies 
					// of them in the new LinkedList

					link.Next();

					if( link.getCurrentNode().getNext() == null){ //Check if the next node is the tail
						copy.add( new Node(link.getCurrentNode().getCurrentStudent()));
						break; //After copying , we break out of the loop
					}
				}
			}

			return copy;

		} catch( NullPointerException e){

		}

		return  copy; //Return this LinkedList to do function

	}
	@Override
	/*******************************************************
	 * Method to undo a previous operation on the LinkedList
	 * Pops an old version of the link 
	 * @return true if the method has been undone
	 *******************************************************/
	public boolean undo() {
		link = linksave.pop();
		return true;
	}

	@Override
	/*************************************************
	 * Method that loads a saved database from a file
	 * Receives serialized objects
	 * @param filename the file that contains the info
	 *************************************************/
	public void loadDB(String fileName) {
		FileInputStream file = null;
		ObjectInputStream obj = null;

		try {
			file = new FileInputStream(fileName);
			obj = new ObjectInputStream(file);

			link = (LinkedList) obj.readObject();

			file.close();
			obj.close();
			linksave.clear();
		} catch (IOException | NullPointerException | ClassNotFoundException ex) {
			ex.printStackTrace();
		}
	}

	@Override
	/*********************************************************
	 * Method that saves the info as serialized objects
	 * @param filename the file where the info is to be stored
	 **********************************************************/
	public void saveDB(String fileName) {

		FileOutputStream file = null ; 
		try {

			file = new FileOutputStream(fileName);

			ObjectOutputStream obj = new ObjectOutputStream(file);

			obj.writeObject(link);
			file.close();
			obj.close();
			linksave.clear();
		} catch (IOException e) {

		}
	}
    /********************************************
     * Method to retrieve the current LinkedList
     * @return LinkedList the current LinkedList
     ********************************************/
	public LinkedList getData(){
		return link;
	}
}
