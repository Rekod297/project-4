package package1;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Stack;

/*****************************************************
 * @author Gloire Rubambiza & Recod Rekodeo
 *@version 04/08/2015
 *Class that handles all list operations
 *Implements all methods of ISimpleDatabase interface
 *****************************************************/


public class SimpleDatabase implements ISimpleDatabase, Serializable{
	
	private static final long serialVersionUID = 1L;
	/**LinkedList of nodes */
	private package1.LinkedList link;

	/**The initial node that creates all other nodes */
	private Node node;
    
	/** A stack to save methods in case they are to be undone */
	private static Stack <LinkedList> linksave = new Stack<LinkedList>();


	/****************************************************
	 * Constructor for SimpleDatabase
	 * Objects from the class are to be used for testing
	 * @param plink reference to an existing LinkedList
	 * @param pnode a node in the existing LinkedList
	 ****************************************************/
	public SimpleDatabase(package1.LinkedList plink, Node pnode){
		link = plink; // Can be given an already-existing LinkedList as parameter
		node = pnode;
	}

	/****************************************************
	 * Constructor for SimpleDatabase
	 * Objects from the class are to be used for testing
	 * Instantiates a new LinkedList of nodes
	 ****************************************************/
	public SimpleDatabase(){
		link = new package1.LinkedList(); //Creates a new LinkedList
		node = new Node();
	}

	@Override
	/************************************************
	 * Method that inserts student info into a node
	 * Unless empty, add the record at the end
	 * @param student the student to be inserted
	 ***********************************************/
	public void insert(Student student){
		
		if( link.getCount() >= 1){
		       doFunction();
		}
		Node n = new Node(student);
		link.add(n);
	}


	@Override
	/************************************************************
	 * Method that deletes a student record from the linked list
	 * Uses a gNumber to find the node to be deleted
	 * @param gNumber the number to compare against
	 ************************************************************/
	public boolean delete(String gNumber) {
		
		
		doFunction();
		if (link.getCount() == 0){
			return false;
		}
		if( gNumber.equals( link.getHead().getCurrentStudent().getGNumber()) ){
			Node temp = link.getHead().getNext();
			link.getHead().setNext(null);
			link.setHead(temp);

			return true; 
		}
		else{
			Node temp = link.getHead().getNext();
			link.setCurrentNode(link.getHead());

			do{
				if( gNumber.equals( temp.getCurrentStudent().getGNumber())) {

					Node temp2 = temp.getNext();
					link.getCurrentNode().setNext(temp2);
					temp.setNext(null);
					return true; 
				}
				temp = temp.getNext();
				link.Next();

			}while( temp.getNext() != null);		
		}

		return false;
	}

	@Override
	/*******************************************************
	 * Method to find a unique student in the LinkedList
	 * Uses a gNumber to find the student
	 * @param gNumber the unique student identifying number
	 ******************************************************/
	public Student find(String gNumber) {
		Node temp = link.getHead();
		if(temp.getCurrentStudent().getGNumber().compareTo(gNumber)== 0){
			return temp.getCurrentStudent();
		}
		while(temp.getNext() != null){
			if(temp.getNext().getCurrentStudent().getGNumber().compareTo(gNumber)== 0){
				return temp.getNext().getCurrentStudent();
			}
			temp = temp.getNext();
		}
		return null;
	}
	public boolean findUnique(String gNumber, package1.LinkedList l) {
		Node temp = l.getHead();
		if(temp.getCurrentStudent().getGNumber().compareTo(gNumber)== 0){
			return true;
		}
		while(temp.getNext() != null){
			if(temp.getNext().getCurrentStudent().getGNumber().compareTo(gNumber)== 0){
				return true;
			}
			temp = temp.getNext();
		}
		return false;
	}

	@Override
	/*******************************************************
	 * Method to sort the students in the LinkedList by name
	 * Calls the compareTo method in the Student class
	 *******************************************************/
	public void Sort() {
		
		
		doFunction();
		if(link.getCount()== 0){
			System.out.println("There's no data to sort");
			return;
		}
		else{
			Node temp = link.getHead();
			link.setCurrentNode(temp);
			int c = link.getCount();

			for( int b = 0; b < link.getCount() ; b++){
				int i = 1;
				while(link.getCurrentNode().getNext() != null && i <= c ){
					link.Next();
					if(temp.getCurrentStudent().compareTo( link.getCurrentNode().getCurrentStudent())==1){
						temp = link.getCurrentNode();
					}
					i++;
				}
				Student cp_a = temp.getCurrentStudent();
				Student cp_b = link.getCurrentNode().getCurrentStudent();

				temp.setCurrentStudent(cp_b);
				link.getCurrentNode().setCurrentStudent(cp_a);

				c--; 
				link.setCurrentNode(link.getHead());
				temp = link.getHead();
			}
		}
	}
	public static void main (String [] args){
		SimpleDatabase data = new SimpleDatabase();
	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    Student test = new Student("Test", "G444", 3.44);
	    Student nu2 = new Student("Gloire", "G01340", 4.5);
	    Student test2 = new Student("Test2", "G1022", 2.3);
	    data.insert(nu);
	    data.insert(leo);
	    data.insert(test);
	    data.insert(nu2);
	    data.insert(test2);
	    System.out.println(data.display());
	    System.out.println();
	    data.delete("G444");
	    System.out.println(data.display());
	    data.undo();
	    System.out.println(data.display());
	    System.out.println("*************************************************");
	    
	}


	@Override
	public boolean update(String gNumber, Student student) {

		return false;
	}


	public String display(){
		String d = "";
		Node temp = link.getHead();
		link.setCurrentNode(temp);
		while(link.getCurrentNode() != null){
			String name = link.getCurrentNode().getCurrentStudent().getName();
			String gnumber = link.getCurrentNode().getCurrentStudent().getGNumber();
			String s = ""; 
			String gpa = s+ link.getCurrentNode().getCurrentStudent().getGpa();
			d += name + " " + gnumber + " " + gpa + " " + "\n";
			link.setCurrentNode(link.getCurrentNode().getNext());
		}
		return d;
	}

	@Override
	/***************************************************************
	 * Method to reserve the list of nodes
	 * Students objects are reversed opposite of alphabetical order 
	 ***************************************************************/
	public void reverseList() {
		
		doFunction();
		package1.LinkedList nlist = new package1.LinkedList();
		while(link.getHead() != null){
			nlist.add(link.getTail());
			Node temp = link.getHead();
			while(temp.getNext()!=null && temp.getNext().getNext() != null){
				temp = temp.getNext();
			}
			if(link.getHead() == link.getTail()){
				link.setHead(null);
			}
			link.setTail(temp);
			link.getTail().setNext(null);
		}
		link = nlist; //Point the old empty list to the new reversed one
	}

	@Override
	/******************************************************
	 * Method that removes all duplicates from the list
	 * Only one copy of the duplicates is left in the list
	 *****************************************************/
	public void removeDuplicates() {
		
		doFunction();
		if(link.getCount() == 0){
			return;
		}
		Stack <Node> nodesaver = new Stack<Node>();
		Node temp = link.getHead();
		package1.LinkedList nlist = new package1.LinkedList();
		while(temp.getNext() != null){
			nodesaver.push(temp);
			if(temp.getNext().getNext() == null){
				nodesaver.push(temp.getNext());
				break;
			}
			temp = temp.getNext();
		}

		Node student = nodesaver.pop();
		nlist.add(student);
		while(nodesaver.isEmpty() == false){
			Node teststudent = nodesaver.pop();
			if(findUnique(teststudent.getCurrentStudent().getGNumber(), nlist) == false){
				nlist.add(new Node( teststudent.getCurrentStudent()));
			}
		}
		link = nlist;
	}
   
	public void doFunction(){
		linksave.push(copyLink());
	}
	
	public LinkedList copyLink(){
		
		LinkedList copy = new LinkedList();
		
		link.setCurrentNode(link.getHead());
		
		if( link.getCount() >=1){
		while( link.getCurrentNode().getNext() != null && link.getCurrentNode().getCurrentStudent()!= null){
			
			copy.add(new Node( link.getCurrentNode().getCurrentStudent()));
			
			link.Next();
			
		  if( link.getCurrentNode().getNext() == null){
				copy.add( new Node(link.getCurrentNode().getCurrentStudent()));
				break;
			}
		
		}
		}
		
		
		return copy;
		
	}
	@Override
	public boolean undo() {
		link = linksave.pop();
		return true;
	}

	@Override
	public void loadDB(String fileName) {
		// To be filled with Recod's code
		
		FileInputStream file = null;
		ObjectInputStream obj = null;

		try {
			file = new FileInputStream(fileName);
			obj = new ObjectInputStream(file);
			
			link = (LinkedList) obj.readObject();
		

			file.close();
			obj.close();
		} catch (IOException | NullPointerException | ClassNotFoundException ex) {
			//
			ex.printStackTrace();
		
		}

	}
	

	@Override
	public void saveDB(String fileName) {
		// To be filled with Recod's code
		
		FileOutputStream file = null ; 
		try {

			file = new FileOutputStream(fileName);

			ObjectOutputStream obj = new ObjectOutputStream(file);

			obj.writeObject(link);
			file.close();
			obj.close();

		} catch (IOException e) {

		}
	}

}
