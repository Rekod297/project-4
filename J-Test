package package1;

import static org.junit.Assert.*;
import junit.framework.Assert;

import org.junit.Test;
/*****************************************************
 * @author Gloire Rubambiza & Recod Rekodeo
 *@version 04/08/2015
 *Class that handles all list operations
 *Implements all methods of ISimpleDatabase interface
 *****************************************************/

public class StudentTest {
	
    /***************************************************
     * Testing getters and setters in the student class
     **************************************************/
	@Test
	public void testStudentClass() {
		Student m = new Student("Leo", "G01207311", 3.88);
		String na = m.getName();
		String gn = m.getGNumber();
		String s = "";
		String gpa = s  + m.getGpa();
		String number = gpa.toString();
		System.out.println("Testing Student class");
		String v = na + " " + gn + " " + gpa + " ";
		System.out.println(v);
		m.setGNumber("G012743");
		gn = m.getGNumber();
		assertEquals(gn,new String("G012743") );
		v = na + " " + gn + " " + gpa + " ";
	    System.out.println(v);
	    System.out.println("*************************************************");
	    System.out.println();
	}
	/*****************************
	 * Testing the display method
	 * Testing the insert method 
	 ****************************/
	@Test
	public void testDisplay(){
	    SimpleDatabase data = new SimpleDatabase();
	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    Student test = new Student("Test", "G0123444", 3.44);
	    data.insert(nu);
	    data.insert(leo);
	    data.insert(test);
	    System.out.println("Testing insert and display");
	    String v = data.display();
	    System.out.println(v);
	    System.out.println("*************************************************");
	}
	
	/*********************************
	 * Testing the find method solely
	 *********************************/
	@Test
	public void testFind(){
		SimpleDatabase data = new SimpleDatabase();
		Student nu = new Student("Gloire", "G01340", 4.5);
		Student leo  = new Student("Recod", "G1022", 2.33);
		Student test = new Student("Test", "G0123444", 3.44);
		data.insert(nu);
		data.insert(leo);
		data.insert(test);
		System.out.println("Testing Find");
		System.out.println(data.display());
		Student finder = data.find("G0123444"); //Point it to the right object
		assertEquals(new String( "G0123444"), finder.getGNumber());
		Student wfinder =  data.find("G01344445");
		assertEquals(null,wfinder);
		System.out.println("*************************************************");
	}
	
	/******************************************
	 * Testing the removeDuplicates method
	 * Uses a gNumber to remove all duplicates
	 ******************************************/
	@Test
	public void testRemoveDuplicates(){
		SimpleDatabase data = new SimpleDatabase();
	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    Student test = new Student("Test", "G0123444", 3.44);
	    Student nu2 = new Student("Gloire", "G01340", 4.5);
	    Student test2 = new Student("Test2", "G1022", 2.3);
	    data.insert(nu);
	    data.insert(leo);
	    data.insert(test);
	    data.insert(nu2);
	    data.insert(test2);
	    System.out.println("Testing removeDuplicates");
	    System.out.println(data.display());
	    data.removeDuplicates();
	    System.out.println();
	    System.out.println(data.display());
	    System.out.println("*************************************************");
	}
	
	/********************************************
	 * Testing the delete method
	 * Uses a gNumber to delete a student record
	 ********************************************/
	@Test
	public void testDelete(){
		SimpleDatabase data = new SimpleDatabase();
	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    Student test = new Student("Test", "G444", 3.44);
	    Student test2 = new Student("Ruba", "G01340", 4.55);
	    data.insert(nu);
	    data.insert(leo);
	    data.insert(test);
	    data.insert(test2);
	    System.out.println("Testing delete");
	    System.out.println(data.display());
	    data.delete("G01340");
	    assertEquals(false, data.delete("G01340"));
	    System.out.println(data.display());
	    data.delete("G1022");
	   // assertEquals(true, data.delete("G1022"));
	    data.delete("G444");
	    System.out.println();
	    System.out.println(data.display());
	    data.delete("G01340");
	    
	    System.out.println();
	    System.out.println(data.display());
	    System.out.println("*************************************************");
	}
	/********************************************
	 * Testing the reverseList method
	 * Reverses the order of the list
	 ********************************************/
	@Test
	public void testReverseList(){
		SimpleDatabase n = new SimpleDatabase();
		Student s = new Student("Gabe", "G11111", 2.3);
		Student v = new Student("Laurie", "G22222", 2.4);
		Student t = new Student("Thomas", "G33333", 2.5);
		Student o = new Student("Veronica", "G44444", 2.7);
		n.insert(s);
		n.insert(v);
		n.insert(t);
		n.insert(o);
		System.out.println();
		System.out.println("Testing reverseList");
		System.out.println(n.display());
		n.reverseList();
		System.out.println();
		System.out.println(n.display());
		System.out.println("*************************************************");
	}
}
