package package1;

import static org.junit.Assert.*;

import java.util.EmptyStackException;

import junit.framework.Assert;

import org.junit.Test;
/*****************************************************
 * @author Gloire Rubambiza & Recod Rekodeo
 *@version 04/08/2015
 *Class that handles all list operations
 *Implements all methods of ISimpleDatabase interface
 *****************************************************/

public class StudentTest {
	
    /***************************************************
     * Testing getters and setters in the student class
     **************************************************/
	@Test
	public void testStudentClass() {
		Student m = new Student("Leo", "G01207311", 3.88);
		String na = m.getName();
		String gn = m.getGNumber();
		String s = "";
		String gpa = s  + m.getGpa();
		String number = gpa.toString();
		System.out.println("Testing Student class");
		String v = na + " " + gn + " " + gpa + " ";
		System.out.println(v);
		m.setGNumber("G012743");
		gn = m.getGNumber();
		assertEquals(gn,new String("G012743") );
		v = na + " " + gn + " " + gpa + " ";
	    System.out.println(v);
	    System.out.println("*************************************************");
	    System.out.println();
	}
	/*****************************
	 * Testing the display method
	 * Testing the insert method 
	 ****************************/
	@Test
	public void testDisplay(){
	    SimpleDatabase data = new SimpleDatabase();
	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    data.insert(nu);
	    data.insert(leo);
	    System.out.println("Testing insert and display");
	    String v = data.display();
	    String s = "Gloire" + " " +"G01340" + " " + "4.5" + " "+ "\n";
	    s = s + "Recod" + " " + "G1022" + " " + "2.33" + " "+ "\n";
	    System.out.println(v);
	    int i = s.compareTo(v);
	    assertEquals(0, i);
	    System.out.println(s);
	    assertEquals("G01340", nu.getGNumber());
	    System.out.println("*************************************************");
	}
	
	/*********************************
	 * Testing the find method solely
	 *********************************/
	@Test
	public void testFind(){
		SimpleDatabase data = new SimpleDatabase();
		Student nu = new Student("Gloire", "G01340", 4.5);
		Student leo  = new Student("Recod", "G1022", 2.33);
		Student test = new Student("Test", "G0123444", 3.44);
		data.insert(nu);
		data.insert(leo);
		data.insert(test);
		System.out.println("Testing Find");
		System.out.println(data.display());
		Student finder = data.find("G0123444"); //Point it to the right object
		assertEquals(new String( "G0123444"), finder.getGNumber());
		Student wfinder =  data.find("G01344445");
		assertEquals(null,wfinder);
		System.out.println("*************************************************");
	}
	
	/******************************************
	 * Testing the removeDuplicates method
	 * Uses a gNumber to remove all duplicates
	 ******************************************/
	@Test
	public void testRemoveDuplicates(){
		SimpleDatabase data = new SimpleDatabase();
	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    Student test = new Student("Test", "G0123444", 3.44);
	    Student nu2 = new Student("Gloire", "G01340", 4.5);
	    Student test2 = new Student("Test2", "G1022", 2.3);
	    data.insert(nu);
	    data.insert(leo);
	    data.insert(test);
	    data.insert(nu2);
	    data.insert(test2);
	    System.out.println("Testing removeDuplicates");
	    System.out.println(data.display());
	    data.removeDuplicates();
	    data.delete("G1022");
	    assertEquals(null, data.find("G1022"));
	    assertEquals(3, data.getData().getCount());
	    System.out.println();
	    System.out.println(data.display());
	    System.out.println("*************************************************");
	}
	
	/********************************************
	 * Testing the delete method
	 * Uses a gNumber to delete a student record
	 ********************************************/
	@Test
	public void testDelete(){
		SimpleDatabase data = new SimpleDatabase();
	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    Student test = new Student("Test", "G4444", 3.44);
	    Student test2 = new Student("Ruba", "G5555", 4.55);
	    data.insert(nu);
	    data.insert(leo);
	    data.insert(test);
	    data.insert(test2);
	    System.out.println("Testing delete");
	    System.out.println(data.display());
	    data.delete("G01340");
	    assertEquals(false, data.delete("G01340"));
	    assertEquals(null, data.find("G01340"));
	    data.delete("G1022");
	    data.delete("G4444");
	    System.out.println(data.display());
	    data.delete("G5555");
	    data.delete("G4444");
	    System.out.println(data.display());
	    
	    System.out.println("*************************************************");
	}
	/********************************************
	 * Testing the reverseList method
	 * Reverses the order of the list
	 ********************************************/
	@Test
	public void testReverseList(){
		SimpleDatabase n = new SimpleDatabase();
		Student s = new Student("Gabe", "G11111", 2.3);
		Student v = new Student("Laurie", "G22222", 2.4);
		Student t = new Student("Thomas", "G33333", 2.5);
		Student o = new Student("Veronica", "G44444", 2.7);
		n.insert(s);
		n.insert(v);
		n.insert(t);
		n.insert(o);
		System.out.println();
		System.out.println("Testing reverseList");
		
		n.reverseList();
		assertEquals( o, n.getData().getHead().getCurrentStudent());
		assertEquals(s, n.getData().getTail().getCurrentStudent());
	
		System.out.println("*************************************************");
	}
	
	/*****************************************
	 * Testing the sort method
	 * Orders the nodes in Alphabetical order
	 *****************************************/
	@Test
	public void testSort(){
		Student s = new Student("E", "G0122", 3.99);
		Student v = new Student("D", "G0233", 2.33);
		Student z = new Student("A", "G0125", 3.44);
		Student c = new Student("B", "G0123", 3.44);
		Student o = new Student ("Z", "G012334", 2.33);
		SimpleDatabase m = new SimpleDatabase();
		m.insert(s);
		m.insert(v);
		m.insert(z);
		m.insert(o);
		m.insert(c);
		System.out.println("Testing sort");
		m.Sort();
		assertEquals(o, m.getData().getTail().getCurrentStudent());
		assertEquals(z, m.getData().getHead().getCurrentStudent());
		System.out.println(m.display());
		System.out.println("*************************************************");
	}
	
	/***************************************************
	 * Testing the Undo method
	 * Keeps track of the state of the LinkedList before
	 * An operation is performed 
	 ***************************************************/
	@Test
	public void testUndo(){
		SimpleDatabase data = new SimpleDatabase();
	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    Student test = new Student("Test", "G444", 3.44);
	    Student nu2 = new Student("Gloire", "G01340", 4.5);
	    Student test2 = new Student("Test2", "G1022", 2.3);
	    data.insert(nu);
	    data.insert(leo);
	    data.insert(test);
	    data.insert(nu2);
	    data.insert(test2);
	    System.out.println("Testing undo");
	    System.out.println(data.display());
	    System.out.println();
	    data.delete("G444");
	    System.out.println();
	    assertEquals(null, data.find("G444"));
	    data.undo();
	    assertEquals(test, data.find("G444"));
	    System.out.println("*************************************************");
	    
	}
	
	/*************************************
	 * Testing the load and save methods
	 *************************************/
	@Test(expected = EmptyStackException.class)
	public void testSaveAndLoad(){
		SimpleDatabase data = new SimpleDatabase();
		SimpleDatabase data2 = new SimpleDatabase();

	    Student nu = new Student("Gloire", "G01340", 4.5);
	    Student leo  = new Student("Recod", "G1022", 2.33);
	    Student test = new Student("Test", "G444", 3.44);
	    Student nu2 = new Student("Gloire", "G01340", 4.5);
	    Student test2 = new Student("Test2", "G1022", 2.3);
	    data.insert(nu);
	    data.insert(leo);
	    data.insert(test);
	    data.insert(nu2);
	    data.insert(test2);
	    System.out.println("Testing load");
	    data.delete("G444");
	    data.saveDB("Testing");
	    data.undo();
	    assertEquals(null, data.find("G444"));
	    data2.loadDB("Testing");
	    assertEquals(data.display(), data2.display());
	}
}
